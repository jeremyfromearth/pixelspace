// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['renderer'], function(Renderer) {
    var HitTests, _ref;
    return HitTests = (function(_super) {
      __extends(HitTests, _super);

      function HitTests() {
        _ref = HitTests.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      HitTests.prototype.init = function() {
        this.centerX = this.width * .5;
        this.centerY = this.height * .5;
        this.rx = this.centerX - 50;
        this.ry = this.centerY - 50;
        this.rw = 100;
        this.rh = 100;
        this.cx = this.centerX - 200;
        this.cy = this.centerY;
        this.cr = 50;
        this.tx0 = this.centerX + 200;
        this.ty0 = this.centerY - 50;
        this.tx1 = this.centerX + 150;
        this.ty1 = this.centerY + 50;
        this.tx2 = this.centerX + 400;
        return this.ty2 = this.centerY + 50;
      };

      HitTests.prototype.render = function() {
        if (Math.hitTestRectangle(this.mouseX, this.mouseY, this.rx, this.ry, this.rw, this.rh)) {
          this.color("#000000");
        } else {
          this.color("#ffffff");
        }
        this.rectangle(this.rx, this.ry, this.rw, this.rh);
        if (Math.hitTestCircle(this.mouseX, this.mouseY, this.cx, this.cy, this.cr)) {
          this.color("#000000");
        } else {
          this.color("#ffffff");
        }
        this.circle(this.cx, this.cy, this.cr);
        if (Math.hitTestTriangle(this.mouseX, this.mouseY, this.tx0, this.ty0, this.tx1, this.ty1, this.tx2, this.ty2)) {
          this.color("#000000");
        } else {
          this.color("#ffffff");
        }
        return this.shape([[this.tx0, this.ty0], [this.tx1, this.ty1], [this.tx2, this.ty2]], true, true);
      };

      return HitTests;

    })(Renderer);
  });

}).call(this);
