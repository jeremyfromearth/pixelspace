// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Compiler;
    return Compiler = (function() {
      function Compiler(ctx) {
        this.ctx = ctx;
        this.compile = __bind(this.compile, this);
      }

      Compiler.prototype.compile = function(code) {
        var error, obj, r;
        r = null;
        try {
          obj = CoffeeScript["eval"](code, {
            bare: true
          });
          if (obj != null) {
            if (obj.main) {
              r = new obj.main(this.ctx);
            } else {
              this.onNoMainClassError();
              return;
            }
          }
          if (r != null) {
            if (r.init != null) {
              try {
                r.init();
              } catch (_error) {
                error = _error;
                this.onInitError(error);
                return;
              }
            }
            if (r.step != null) {
              try {
                r.step();
              } catch (_error) {
                error = _error;
                this.onStepError(error);
                return;
              }
            }
            if (r.render != null) {
              try {
                r.render();
              } catch (_error) {
                error = _error;
                this.onRenderError(error);
                return;
              }
            }
          }
          obj = null;
          return CoffeeScript["eval"](code, {
            bare: true
          });
        } catch (_error) {
          error = _error;
          return this.onCompilationError(error);
        }
      };

      Compiler.prototype.onCompilationError = function(error) {
        return console.log("onCompilationError()", error.message);
      };

      Compiler.prototype.onInitError = function(error) {
        return console.log("onInitializationError()");
      };

      Compiler.prototype.onNoMainClassError = function() {
        return console.log("onNoMainClassError()");
      };

      Compiler.prototype.onRenderError = function(error) {
        return console.log("onRenderError()", error.message);
      };

      Compiler.prototype.onStepError = function(error) {
        return console.log("onStepError()");
      };

      return Compiler;

    })();
  });

}).call(this);
